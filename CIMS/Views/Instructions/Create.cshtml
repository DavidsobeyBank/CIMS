@model CIMS.Models.Instruction
@{
    ViewBag.Title = "Create CIMS Document";
    Layout = "~/Views/Shared/_Layout.cshtml";
}




@using (Html.BeginForm("Create", "Instructions", new { clientID = ViewBag.ClientID, InstructionTypeID = ViewBag.InstructionTypeID }, FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="col-lg-6">
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.InstructionID)
            
            <div class="form-group">
                @Html.LabelFor(model => model.ClientID, "Client", htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10">
                    @Html.TextBox("Client", (String)ViewBag.Client, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.InstructionTypeID, "Instruction Type", htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10">
                    @Html.DropDownList("InstructionTypeID", new SelectList(ViewBag.InstructionTypeID, "Value", "Text", ViewBag.InstructionType), "-- Select --", htmlAttributes: new { @class = "form-control", @onchange = "form.submit();" })
                    @Html.ValidationMessageFor(model => model.InstructionTypeID, "", new { @class = "text-danger" })
                </div>
            </div>
            @try
            {
                if (ViewBag.StatusID != null)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.StatusID, "Send To:", htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.DropDownList("StatusID", new SelectList(ViewBag.StatusID, "Value", "Text", ViewBag.Status), "-- Select --", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.StatusID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
            }
            catch (Exception E)
            {

            }
            <div class="form-group">
                @Html.LabelFor(model => model.BranchID, "Branch", htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10">
                    @Html.DropDownList("BranchID", new SelectList(ViewBag.BranchID, "Value", "Text", ViewBag.Branch), "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BranchID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                    @if (ViewBag.StatusID != null)
                    {
                        @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                    }
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CurrencyTo, "Cross Currency", htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10">
                    @Html.DropDownList("CurrencyTo", new SelectList(ViewBag.CurrencyTo, "Value", "Text"), "-- Select --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CurrencyTo, "", new { @class = "text-danger" })
                </div>
            </div>
           

            <div class="form-group">
                @Html.LabelFor(model => model.EERef, htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EERef, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EERef, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Comment", htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10">
                    @Html.TextArea("comment", null,new { @class = "form-control" } )
                </div>
            </div>


        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-outline-primary" />
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
